{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","handleTermChange","bind","search","this","onSearch","e","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderActionButton","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","newAccessToken","window","location","href","match","newExpiresIn","expiresIn","Number","setTimeout","history","pushState","accessUrl","searchTerm","headers","Authorization","fetch","then","response","ok","json","Error","networkError","console","log","message","jsonResponse","items","artists","uri","savePlaylist","playlistName","trackURIs","length","userID","playlistID","method","body","JSON","stringify","uris","App","changePlaylistName","updatedTrackList","find","savedTrack","push","updatedListTracks","filter","curTrack","newTracks","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAAIA,E,gGCGSC,EAAb,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,CAACC,KAAM,IAClB,EAAKC,iBAAiB,EAAKA,iBAAiBC,KAAtB,gBACtB,EAAKC,OAAO,EAAKA,OAAOD,KAAZ,gBAJE,EADtB,0CAQI,WACIE,KAAKN,MAAMO,SAASD,KAAKL,MAAMC,QATvC,8BAWI,SAAiBM,GACbF,KAAKG,SAAS,CAACP,KAAMM,EAAEE,OAAOC,UAZtC,oBAeI,WACI,OACI,sBAAKC,UAAU,YAAf,UAEI,uBAAOC,YAAY,sCAAsCC,SAAUR,KAAKH,mBACxE,wBAAQS,UAAU,eAAeG,QAAST,KAAKD,OAA/C,2BApBhB,GAA+BW,IAAMC,WCAxBC,G,YAAb,kDACI,WAAYlB,GAAO,IAAD,8BACd,cAAMA,IACDmB,SAAS,EAAKA,SAASf,KAAd,gBACd,EAAKgB,YAAY,EAAKA,YAAYhB,KAAjB,gBAHH,EADtB,4CAMI,WACIE,KAAKN,MAAMqB,MAAMf,KAAKN,MAAMsB,SAPpC,yBAUI,WACIhB,KAAKN,MAAMuB,SAASjB,KAAKN,MAAMsB,SAXvC,gCAaI,WACI,OAAGhB,KAAKN,MAAMwB,UACH,wBAAQZ,UAAU,eAAeG,QAAST,KAAKc,YAA/C,eAEA,wBAAQR,UAAU,eAAeG,QAAST,KAAKa,SAA/C,iBAjBnB,oBAqBI,WACI,OACI,sBAAKP,UAAU,QAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,6BAAKN,KAAKN,MAAMsB,MAAMG,OACtB,8BAAInB,KAAKN,MAAMsB,MAAMI,OAArB,MAAgCpB,KAAKN,MAAMsB,MAAMK,YAEpDrB,KAAKsB,4BA5BtB,GAA2BZ,IAAMC,YCCpBY,G,MAAb,4JACI,WAAS,IAAD,OACJ,OACI,qBAAKjB,UAAU,YAAf,SACCN,KAAKN,MAAM8B,QAAUxB,KAAKN,MAAM8B,OAAOC,KAAI,SAAAT,GACxC,OAAO,cAAC,EAAD,CACKA,MAAOA,EAEPD,MAAO,EAAKrB,MAAMqB,MAClBG,UAAW,EAAKxB,MAAMwB,UACtBD,SAAU,EAAKvB,MAAMuB,UAHhBD,EAAMU,aAPvC,GAA+BhB,IAAMC,YCAxBgB,EAAb,4JACI,WACI,OACI,sBAAKrB,UAAU,gBAAf,UACI,yCACA,cAAC,EAAD,CACIkB,OAAQxB,KAAKN,MAAMkC,cACnBb,MAAOf,KAAKN,MAAMqB,MAClBG,WAAW,WAR/B,GAAmCR,IAAMC,WCA5BkB,G,MAAb,kDACI,WAAYnC,GAAO,IAAD,8BACd,cAAMA,IACDoC,iBAAiB,EAAKA,iBAAiBhC,KAAtB,gBAFR,EADtB,oDAMI,SAAiBI,GACbF,KAAKN,MAAMqC,aAAa7B,EAAEE,OAAOC,SAPzC,oBAUI,WACI,OACI,sBAAKC,UAAU,WAAf,UACI,uBAAO0B,aAAc,eAAgBxB,SAAUR,KAAK8B,mBACpD,cAAC,EAAD,CACIN,OAAQxB,KAAKN,MAAMuC,eACnBhB,SAAUjB,KAAKN,MAAMuB,SACrBC,WAAW,IAIf,wBAAQZ,UAAU,gBAAgBG,QAAST,KAAKN,MAAMwC,OAAtD,oCArBhB,GAA8BxB,IAAMC,YLC9BwB,EAAU,CACZC,eADY,WAER,GAAI5C,EACA,OAAOA,EAGX,IAAM6C,EAAiBC,OAAOC,SAASC,KAAKC,MAAM,wBAC5CC,EAAeJ,OAAOC,SAASC,KAAKC,MAAM,sBAEhD,GAAIJ,GAAkBK,EAAc,CAChClD,EAAc6C,EAAe,GAC7B,IAAMM,EAAYC,OAAOF,EAAa,IAGtC,OAFAJ,OAAOO,YAAW,kBAAMrD,EAAc,KAAgB,IAAZmD,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCvD,EAEP,IAAMwD,EAAS,2DAlBV,mCAkBU,2FApBN,6CAqBTV,OAAOC,SAAWS,GAI1BjD,OArBY,SAqBLkD,GACH,IAAMzD,EAAc2C,EAAQC,iBACtBc,EAAU,CAACC,cAAc,UAAD,OAAY3D,IAE1C,OAAO4D,MAAM,kDAAD,OAAmDH,GAAc,CAACC,QAASA,IACtFG,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEpB,MAAM,IAAIC,MAAM,sBACjB,SAAAC,GACCC,QAAQC,IAAIF,EAAaG,YAC1BR,MAAK,SAAAS,GACR,OAAKA,EAAatC,OAGXsC,EAAatC,OAAOuC,MAAMtC,KAAI,SAAAT,GAAK,MAAK,CAC3CU,GAAIV,EAAMU,GACVP,KAAMH,EAAMG,KACZC,OAAQJ,EAAMgD,QAAQ,GAAG7C,KACzBE,MAAOL,EAAMK,MAAMF,KACnB8C,IAAKjD,EAAMiD,QAPJ,OAWfC,aA9CY,SA8CCC,EAAcC,GACvB,GAAID,GAAgBC,EAAUC,OAAQ,CAClC,IAIAC,EACAC,EALM/E,EAAc2C,EAAQC,iBACtBc,EAAU,CACZC,cAAc,UAAD,OAAY3D,IAIjC,OAAO4D,MAAM,gCAAiC,CAACF,QAASA,IACvDG,MAAK,SAAAC,GACF,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEpB,MAAM,IAAIC,MAAM,sBACjB,SAAAC,GACCC,QAAQC,IAAIF,EAAaG,YAC1BR,MAAK,SAAAS,GAEJ,OADAQ,EAASR,EAAapC,GACf0B,MAAM,oCAAD,OAAqCkB,EAArC,cAAyD,CACjEE,OAAQ,OACRtB,QAASA,EACTuB,KAAMC,KAAKC,UAAU,CAACxD,KAAMgD,MAC7Bd,MAAK,SAAAC,GACR,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEpB,MAAM,IAAIC,MAAM,sBACb,SAAAC,GACCC,QAAQC,IAAIF,EAAaG,YAC1BR,MAAK,SAAAS,GAEJ,OADAS,EAAaT,EAAapC,GACnB0B,MAAM,oCAAD,OAAqCkB,EAArC,sBAAyDC,EAAzD,WAA8E,CACtFC,OAAQ,OACRtB,QAASA,EACTuB,KAAMC,KAAKC,UAAU,CAACC,KAAMR,MAC7Bf,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEpB,MAAM,IAAIC,MAAM,sBACjB,SAAAC,GACCC,QAAQC,IAAIF,EAAaG,YAC1BR,MAAK,SAAAS,GAAY,OAAIA,cAUzB3B,IMZA0C,E,kDAlFb,WAAYnF,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTiC,cAAc,GACduC,aAAc,UACdlC,eAAgB,IAElB,EAAKpB,SAAS,EAAKA,SAASf,KAAd,gBACd,EAAKgB,YAAY,EAAKA,YAAYhB,KAAjB,gBACjB,EAAKgF,mBAAmB,EAAKA,mBAAmBhF,KAAxB,gBACxB,EAAKoE,aAAa,EAAKA,aAAapE,KAAlB,gBAClB,EAAKC,OAAO,EAAKA,OAAOD,KAAZ,gBAXI,E,4CAclB,SAASkB,GACP,IAAI+D,EAAmB/E,KAAKL,MAAMsC,eAC/B8C,EAAiBC,MAAK,SAAAC,GAAU,OAAEA,EAAU,KAAUjE,EAAK,QAG9D+D,EAAiBG,KAAKlE,GACtBhB,KAAKG,SAAS,CACZ8B,eAAgB8C,O,yBAIpB,SAAY/D,GACV,IAAImE,EAAoBnF,KAAKL,MAAMsC,eACnCkD,EAAoBA,EAAkBC,QAAO,SAAAC,GAAQ,OAAGA,EAAQ,KAAWrE,EAAK,MAEhFhB,KAAKG,SAAS,CACZ8B,eAAgBkD,M,gCAIpB,SAAmBhE,GACjBnB,KAAKG,SAAS,CACZgE,aAAchD,M,oBAIlB,SAAO8B,GAAY,IAAD,OAChBd,EAAQpC,OAAOkD,GACdI,MAAK,SAAAiC,GAAS,OACb,EAAKnF,SAAS,CAACyB,cAAe0D,S,0BAIlC,WAAe,IAAD,OACRlB,EAAYpE,KAAKL,MAAMsC,eAAeR,KAAI,SAAAT,GAAK,OAAEA,EAAMiD,OAC3D9B,EAAQ+B,aAAalE,KAAKL,MAAMwE,aAAcC,GAC7Cf,MAAK,WACJ,EAAKlD,SAAS,CAACgE,aAAc,eACflC,eAAgB,U,oBAKlC,WACE,OACE,gCACE,0CAAY,sBAAM3B,UAAU,YAAhB,iBAAZ,OACA,sBAAKA,UAAU,MAAf,UACE,cAAC,EAAD,CAAWL,SAAUD,KAAKD,SAC1B,sBAAKO,UAAU,eAAf,UACE,cAAC,EAAD,CACIsB,cAAe5B,KAAKL,MAAMiC,cAC1Bb,MAAOf,KAAKa,WAChB,cAAC,EAAD,CACMsD,aAAcnE,KAAKL,MAAMwE,aACzBlC,eAAgBjC,KAAKL,MAAMsC,eAC3BhB,SAAUjB,KAAKc,YACfiB,aAAc/B,KAAK8E,mBACnB5C,OAAQlC,KAAKkE,4B,GAzEbxD,IAAMC,WCIT4E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b013e7f6.chunk.js","sourcesContent":["let accessToken;\r\nconst redirect_uri = \"https://kiselevaolga.github.io/playmyjam/\";\r\n\r\nconst clientId = \"6e1b1121ee214ff780b973c92bf2d58c\";\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        const newAccessToken = window.location.href.match(/access_token=([^&]*)/);\r\n        const newExpiresIn = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (newAccessToken && newExpiresIn) {\r\n            accessToken = newAccessToken[1];\r\n            const expiresIn = Number(newExpiresIn[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&show_dialog=true&redirect_uri=${redirect_uri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(searchTerm) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = {Authorization: `Bearer ${accessToken}`};\r\n\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {headers: headers})\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            throw new Error('Request failed!');\r\n        }, networkError => {\r\n            console.log(networkError.message);\r\n        }).then(jsonResponse => {\r\n        if (!jsonResponse.tracks) {\r\n            return [];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n            id: track.id, \r\n            name: track.name, \r\n            artist: track.artists[0].name, \r\n            album: track.album.name, \r\n            uri: track.uri}));\r\n        });\r\n    },\r\n\r\n    savePlaylist(playlistName, trackURIs) {\r\n        if (playlistName && trackURIs.length) {\r\n            const accessToken = Spotify.getAccessToken();\r\n            const headers = {\r\n                Authorization: `Bearer ${accessToken}`\r\n        };\r\n        let userID;\r\n        let playlistID;\r\n        return fetch('https://api.spotify.com/v1/me', {headers: headers})\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            throw new Error('Request failed!');\r\n        }, networkError => {\r\n            console.log(networkError.message);\r\n        }).then(jsonResponse => {\r\n            userID = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\r\n                method: 'POST',\r\n                headers: headers,\r\n                body: JSON.stringify({name: playlistName})\r\n            }).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            throw new Error('Request failed!');\r\n            }, networkError => {\r\n                console.log(networkError.message);\r\n            }).then(jsonResponse => {\r\n                playlistID = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`, {\r\n                    method: 'POST',\r\n                    headers: headers,\r\n                    body: JSON.stringify({uris: trackURIs})\r\n                }).then(response => {\r\n                    if (response.ok) {\r\n                        return response.json();\r\n                    }\r\n                    throw new Error('Request failed!');\r\n                }, networkError => {\r\n                    console.log(networkError.message);\r\n                }).then(jsonResponse => jsonResponse);\r\n            });\r\n        });\r\n\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nexport class SearchBar extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={term: ''}\r\n        this.handleTermChange=this.handleTermChange.bind(this);\r\n        this.search=this.search.bind(this);\r\n    }\r\n\r\n    search(){\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n    handleTermChange(e){\r\n        this.setState({term: e.target.value});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"SearchBar\">\r\n        \r\n                <input placeholder=\"Enter name of Artist, song or album\" onChange={this.handleTermChange}></input>\r\n                <button className=\"SearchButton\" onClick={this.search}>Search</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './Track.css';\r\n\r\nexport class Track extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.addTrack=this.addTrack.bind(this);\r\n        this.removeTrack=this.removeTrack.bind(this);\r\n    }\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n    renderActionButton(){\r\n        if(this.props.isRemoval){\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        }else{\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderActionButton()}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {Track} from '../Track/Track';\r\nimport './TrackList.css';\r\n\r\nexport class TrackList extends React.Component {\r\n    render(){\r\n        return (\r\n            <div className=\"TrackList\">\r\n            {this.props.tracks && this.props.tracks.map(track=>{\r\n                return <Track \r\n                            track={track}\r\n                            key={track.id}\r\n                            onAdd={this.props.onAdd}\r\n                            isRemoval={this.props.isRemoval}\r\n                            onRemove={this.props.onRemove}\r\n                        />\r\n            })}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './SearchResults.css';\r\nimport {TrackList} from '../TrackList/TrackList';\r\n\r\nexport class SearchResults extends React.Component {\r\n    render(){\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList \r\n                    tracks={this.props.searchResults}\r\n                    onAdd={this.props.onAdd}\r\n                    isRemoval={false}\r\n\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './Playlist.css';\r\nimport {TrackList} from '../TrackList/TrackList';\r\n\r\nexport class Playlist extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleNameChange=this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e){\r\n        this.props.onNameChange(e.target.value)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New playlist\"} onChange={this.handleNameChange}></input>\r\n                <TrackList \r\n                    tracks={this.props.playlistTracks} \r\n                    onRemove={this.props.onRemove}\r\n                    isRemoval={true}\r\n                    \r\n\r\n                    />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>Save to Spotify</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","import './App.css';\nimport React from 'react';\nimport {SearchBar} from '../SearchBar/SearchBar';\nimport {SearchResults} from '../SearchResults/SearchResults';\nimport {Playlist} from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify.js';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      searchResults:[],\n      playlistName: 'my list',\n      playlistTracks: []\n    };\n    this.addTrack=this.addTrack.bind(this);\n    this.removeTrack=this.removeTrack.bind(this);\n    this.changePlaylistName=this.changePlaylistName.bind(this);\n    this.savePlaylist=this.savePlaylist.bind(this);\n    this.search=this.search.bind(this);\n  }\n  \n  addTrack(track){\n    let updatedTrackList = this.state.playlistTracks;\n    if(updatedTrackList.find(savedTrack=>savedTrack[\"id\"]=== track[\"id\"])){\n      return\n    }\n    updatedTrackList.push(track);\n    this.setState({\n      playlistTracks: updatedTrackList\n    })\n  }\n\n  removeTrack(track){\n    let updatedListTracks = this.state.playlistTracks;\n    updatedListTracks = updatedListTracks.filter(curTrack=> curTrack['id'] !== track['id'])\n    \n    this.setState({\n      playlistTracks: updatedListTracks\n    })\n  }\n\n  changePlaylistName(name){\n    this.setState({\n      playlistName: name\n    })\n  }\n\n  search(searchTerm){\n    Spotify.search(searchTerm)\n    .then(newTracks=>\n      this.setState({searchResults: newTracks})\n    );\n  }\n\n  savePlaylist(){   \n    let trackURIs = this.state.playlistTracks.map(track=>track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs)\n    .then(()=>{\n      this.setState({playlistName: 'New playlist',\n                    playlistTracks: []\n                  })\n    });\n  }\n\n  render(){\n    return(\n      <div>\n        <h1>Play my <span className=\"highlight\">Jam</span>!</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults \n                searchResults={this.state.searchResults} \n                onAdd={this.addTrack}/>\n            <Playlist \n                  playlistName={this.state.playlistName}\n                  playlistTracks={this.state.playlistTracks}\n                  onRemove={this.removeTrack}\n                  onNameChange={this.changePlaylistName}\n                  onSave={this.savePlaylist}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}